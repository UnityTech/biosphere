#!/usr/bin/ruby

require 'biosphere'
require 'optparse'
require 'ostruct'
require 'pp'
require "awesome_print"
require 'colorize'
require 'biosphere/s3.rb'

class BiosphereOpts

	def self.parse(args)

		options = OpenStruct.new
		options.build = "build"
		options.src = "./"
		options.version = ::Biosphere::Version

		opt_parser = OptionParser.new do |opts|


			opts.banner = "Usage: \"biosphere [options] <action>\""

			opts.separator ""
			opts.separator "Commands:"
			opts.separator "\tjson\tWrite tf files as json into build directory"
			opts.separator "\tplan\tRun the planning phase"
			opts.separator "\tcommit\tCommit changes and update the infrastructure"
			opts.separator "\tlock\tAcquire lock for remote state"
			opts.separator "\tunlock\tRelease lock for remote state"
			opts.separator "\taction [action]\tCall an action defined in the application .rb files"
			opts.separator ""

			opts.on_tail("-h", "--help", "Show this message") do
				puts opts
				exit
			end

			opts.on("--src PATH", "Directory where the application .rb files are") do |path|
				options.src = path
			end

			opts.on("--build PATH", "Directory where to build json files") do |path|
				options.build = path
			end

		end

		opt_parser.parse!(args)
		options
	end

end

if !STDOUT.isatty
	String.disable_colorization true
end

options = BiosphereOpts.parse(ARGV)

if ARGV.length == 0
	STDERR.puts "No action spesified. Use -h to get help."
	exit -1
end

if !File.directory?(options.src)
	STDERR.puts "Directory #{options.build} is not a directory or it doesn't exists."
	exit -1
end

if options.src
	suite = Biosphere::Suite.new(options.src)
	if options.src == "./"
		STDERR.puts "Loading suite from current directory (#{File.expand_path(options.src)}). Use --src to change the path"
	end

	if suite.load_all() == 0
		STDERR.puts "No files found. Are you in the right directory where your biosphere .rb files are?"
		exit -1
	end
end

if options.build
	if !File.directory?(options.build)
		STDERR.puts "Creating build directory #{options.build} because it was missing"
		Dir.mkdir(options.build)
	end
end

if options.src && suite.node[:settings][:cluster_name] && suite.node[:settings][:s3_bucket]
	if suite.node[:settings][:s3_bucket].nil? || suite.node[:settings][:s3_bucket].empty? || suite.node[:settings][:cluster_name].nil? || suite.node[:settings][:cluster_name].empty?
		puts "\nNo S3 bucket or cluster name defined in configuration, can't continue"
		exit 1
	end
	s3 = S3.new(suite.node[:settings][:s3_bucket], suite.node[:settings][:cluster_name])
end

if ARGV[0] == "json" && options.src
	suite.evaluate_resources()

	if !File.directory?(options.build)
		STDERR.puts "Directory #{options.build} is not a directory or it doesn't exists."
		exit -1
	end

	count = 0
	suite.write_json_to(options.build) do |file_name, destination, str, proxy|
		puts "Wrote #{str.length} bytes from #{file_name} to #{destination} (#{proxy.export["resource"].length} resources)"
		count = count + 1
	end

	puts "Wrote #{count} files into #{options.build}"
	suite.save_node()

elsif ARGV[0] == "plan" && options.src
	suite.evaluate_plans()
	ap suite.node, :indent=>-4

elsif ARGV[0] == "action" && options.src
	context = Biosphere::ActionContext.new()

	context.build_directory = options.build

	if suite.call_action(ARGV[1], context)
		STDERR.puts "Executing action #{ARGV[1]}"
	else
		STDERR.puts "Could not find action #{ARGV[1]}"
	end

	suite.save_node()

elsif ARGV[0] == "commit" && options.src
	s3.set_lock()
	s3.retrieve("#{options.src}build/terraform.tfstate")
	tf_plan = %x( terraform plan -state=#{options.src}build/terraform.tfstate #{options.src}/build/ )
	puts tf_plan
	answer = ""
	while answer.empty? || (answer != "y" && answer != "n")
		print "\nDoes the plan look reasonable? (Answering yes will apply the changes) y/n: "
		answer = STDIN.gets.chomp
	end

	if answer == "n"
		puts "\nOk, will not proceed with commit"
	elsif answer == "y"
		puts "\nApplying the changes (this may take several minutes)"
		tf_apply = %x( terraform apply -state=#{options.src}build/terraform.tfstate #{options.src}/build/ )
		puts tf_apply
	end

	s3.save("#{options.src}build/terraform.tfstate")
	s3.save("#{options.src}state.node")

	puts "\nRemoving local state from #{options.src}build/terraform.tfstate"
	begin
		File.delete("#{options.src}build/terraform.tfstate")
	rescue
		puts "Couldn't delete the local state file!"
	end

	s3.release_lock()

elsif ARGV[0] == "lock"
	s3.set_lock()

elsif ARGV[0] == "unlock"
	s3.release_lock()

else
	STDERR.puts "\nERROR: Unknown command #{ARGV[0]}. Maybe you wanted to do: \"biosphere action #{ARGV[0]}\"?"
	exit -1
end

