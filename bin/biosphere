#!/usr/bin/ruby

require 'biosphere'
require 'optparse'
require 'ostruct'
require 'pp'
require "awesome_print"
require 'colorize'
require 'biosphere/s3.rb'
require 'pty'


# Asks a question
# Choises is an array of valid answers, such as ['y', 'n']
# If optional force is set to true then the first choise option is returned.
def ask_question(question, choices, force: false, color: :yellow)
    answer = ""
    if force
        puts question + " Forcing since --force is set"
        return choices.first
    end

    while answer.empty? || !choices.include?(answer.downcase)
        puts (question + " [" + choices.join('/') + "]").colorize(color)
        answer = STDIN.gets.chomp
    end

    return answer
end


class BiosphereOpts

    def self.parse(args)

        options = OpenStruct.new
        options.build_dir = "build"
        options.src = "./"
        options.force = false
        options.version = ::Biosphere::Version

        opt_parser = OptionParser.new do |opts|


            opts.banner = "Usage: \"biosphere [options] <action>\""

            opts.separator ""
            opts.separator "Commands:"
            opts.separator "\tbuild\tWrite tf files as json into build directory"
            opts.separator "\tplan\tRun the planning phase"
            opts.separator "\tcommit\tCommit changes and update the infrastructure"
            opts.separator "\tlock\tAcquire lock for remote state"
            opts.separator "\tunlock\tRelease lock for remote state"
            opts.separator "\taction [action]\tCall an action defined in the application .rb files"
            opts.separator ""

            opts.on_tail("-h", "--help", "Show this message") do
                puts opts
                exit
            end

            opts.on("--src PATH", "Directory where the application .rb files are") do |path|
                options.src = path
            end

            opts.on("--build-dir PATH", "Directory where to build json files") do |path|
                options.build_dir = path
            end

            opts.on_tail("-v", "--version", "Show version") do
                puts options.version
                exit
            end

            opts.on("--force", "Don't prompt for user input") do
                options.force = true
            end

        end

        opt_parser.parse!(args)
        options
    end

end

if !STDOUT.isatty
    String.disable_colorization true
end

update_info = Biosphere::CLI::UpdateManager::check_for_update()
if !update_info[:up_to_date]
    STDERR.puts "Notice. There is a new #{update_info[:latest]} biosphere version available. Your current version is #{update_info[:current]}\nUse \"gem install biosphere\" to update".colorize(:yellow)
end


options = BiosphereOpts.parse(ARGV)

if ARGV.length == 0
    STDERR.puts "No action spesified. Use -h to get help."
    exit -1
end

if !File.directory?(options.src)
    STDERR.puts "Directory #{options.build_dir} is not a directory or it doesn't exists."
    exit -1
end

if options.build_dir
    if !File.directory?(options.build_dir)
        STDERR.puts "Creating build directory #{options.build_dir} because it was missing"
        Dir.mkdir(options.build_dir)
    end
end

if options.src
    state = Biosphere::State.new
    suite = Biosphere::Suite.new(state)

    if options.src == "./"
        STDERR.puts "Loading suite from current directory (#{File.expand_path(options.src)}). Use --src to change the path"
    end

    # We need to load the suite once so that we can find the Biosphere settings
    begin
        if suite.load_all(options.src) == 0 || suite.deployments.size == 0
            STDERR.puts "No files found. Are you in the right directory where your biosphere .rb files are?"
            exit -1
        end
    rescue ::Biosphere::ConfigurationError => e
        STDERR.puts "Configuration Error: #{e}".colorize(:red)
        if e.explanation
            STDERR.puts e.explanation
        end
        if e.settings
            STDERR.puts "Relevant configuration part:"
            ap e.settings
        end
        exit -1
    end

    if suite.biosphere_settings[:local] == true
        localmode = true
    else
        localmode = false
        if suite.biosphere_settings[:s3_bucket].nil? || suite.biosphere_settings[:s3_bucket].empty? ||
            suite.biosphere_settings[:state_name].nil? || suite.biosphere_settings[:state_name].empty?
            puts "\nNo S3 bucket or cluster name defined in configuration, can't continue"
            exit 1
        end
        s3 = S3.new(suite.biosphere_settings[:s3_bucket], suite.biosphere_settings[:state_name])
        s3.retrieve("#{options.build_dir}/state.node")
    end

    # This will update the state which is already passed to the suite.
    state.filename = "#{options.build_dir}/state.node"
     if File.exists?(state.filename)
        puts "Loading state from #{state.filename}"
        state.load()
    end

    destroyed_deployments = state.node[:deployments].keys - suite.deployments.keys
    if destroyed_deployments.length > 0
        destroyed_deployments.each do |deployment_name|
            answer = ask_question("State file has remins of an old deployment #{deployment_name}. Do you want to clean these now?", ['y', 'n'], force: options.force)
            if answer == "y"
                puts "Clearing #{deployment_name}"
                state.node[:deployments].delete(deployment_name)
            else
                puts "Leaving #{deployment_name}, this might affect for example action kubectl."
            end
        end
    end

    unless state.node[:deployments][""].nil?
        answer = ""
        if !options.force
            while answer.empty? || (answer != "y" && answer != "n")
                puts "\e[31mDeployment with an empty name, do you want to clean these out now? [y/n]\e[0m"
                answer = STDIN.gets.chomp
            end

            if answer == "n"
                puts "Remember to clean these out later, this state won't work with Kubernetes"
            elsif answer == "y"
                state.node[:deployments].delete("")
                puts "\e[32mRemoved deployment with empty name\e[0m"
            end
        else
            puts "Forcing since --force was set"
        end
    end
end

# If we are doing something which is allowed to modify the state
if ["build", "action", "commit"].include?(ARGV[0])
    if !state.node[:biosphere]
        state.node[:biosphere] = {}
    end
    state.node[:biosphere][:version] = ::Biosphere::Version
end

if ARGV[0] == "build" && options.src
    suite.evaluate_resources()

    if !File.directory?(options.build_dir)
        STDERR.puts "Directory #{options.build_dir} is not a directory or it doesn't exists."
        exit -1
    end

    count = 0
    suite.write_json_to(options.build_dir) do |file_name, destination, str, deployment|
        puts "Wrote #{str.length} bytes from #{file_name} to #{destination} (#{deployment.export["resource"].length} resources)"
        count = count + 1
    end

    puts "Wrote #{count} files under #{options.build_dir}"
    state.node[:biosphere][:last_build_time] = Time.now.utc.strftime('%Y-%m-%dT%H:%M:%SZ')

    state.save()
    s3.save("#{options.build_dir}/state.node") unless localmode

elsif ARGV[0] == "plan" && options.src
    suite.evaluate_plans()
    ap suite.node, :indent=>-4

elsif ARGV[0] == "state" && options.src
    ap suite.state.node, :indent=>-4    

elsif ARGV[0] == "action" && options.src
    context = Biosphere::ActionContext.new()
    context.build_directory = options.build_dir

    if !ARGV[1] || ARGV[1] == "--help" || ARGV[1] == "-h" || ARGV[1] == "help"
        puts "Syntax: biosphere action <command>"
        puts "Available actions:"
        suite.actions.each do |key, value|
            puts "\t#{key}"
        end
        exit -1
    end

    if suite.call_action(ARGV[1], context)
    else
        STDERR.puts "Could not find action #{ARGV[1]}"
    end
    state.save()
    s3.save("#{options.build_dir}/state.node") unless localmode

elsif ARGV[0] == "deployment" && options.src

    suite.deployments.each do |name, deployment|
        puts "Deployment: #{name}"
    end

elsif ARGV[0] == "statereset" && options.src

    answer = ""
    if !options.force
        while answer.empty? || (answer != "y" && answer != "n")
            print "\nAre you sure you want to do a full state reset for #{options.build_dir} y/n: "
            answer = STDIN.gets.chomp
        end
    else
        answer = "y"
    end

    if answer == "n"
        puts "\nOk, will not proceed with state reset"
    elsif answer == "y"
        state = Biosphere::State.new
        state.filename = "#{options.build_dir}/state.node"
        state.save()
        s3.save("#{options.build_dir}/state.node") unless localmode
        suite.deployments.each do |name, deployment|
            s3.delete_object()
        end
    end

elsif ARGV[0] == "commit" && options.src
    if localmode
        STDERR.puts "commit not supported in local mode (set in Settings :biosphere[:local] = true"
        exit -1
    end

    if !ARGV[1]
        puts "Please specify deployment name as the second parameter."
        puts "Available deployments:"
        suite.deployments.each do |name, deployment|
            puts "\t#{name}"
        end
        exit -1
    end
    deployment = ARGV[1]
    if !suite.deployments[deployment]
        puts "Deployment #{deployment} not found!"
        puts "Available deployments:"
        suite.deployments.each do |name, deployment|
            puts "\t#{name}"
        end
        exit -1
    end

    s3.set_lock()
    s3.retrieve("#{options.build_dir}/#{deployment}.tfstate")
    begin
        tf_plan_str = %x( terraform plan -state=#{options.build_dir}/#{deployment}.tfstate -out #{options.build_dir}/plan #{options.build_dir}/#{deployment}  )
    rescue Errno::ENOENT => e
        STDERR.puts "Could not find terraform. Install with with \"brew install terraform\"".colorize(:red)
        s3.release_lock()
    end

    tf_graph_str = %x( terraform graph #{options.build_dir}/#{deployment} )

    tfplanning = Biosphere::CLI::TerraformPlanning.new()
    plan = tfplanning.generate_plan(suite.deployments[deployment], tf_plan_str, tf_graph_str)
    if !plan
        STDERR.puts "Error parsing tf plan output" 
        s3.release_lock()
        exit
    end

    
    # Print the raw terraform output
    puts "== TERRAFORM PLAN START ==".colorize(:green)
    puts "\n" + tf_plan_str
    puts "==  TERRAFORM PLAN END  ==".colorize(:green)
    puts "\n"
    # Print our pretty short plan
    puts "Target group listing:"
    plan.print

    targets = plan.get_resources.collect { |x| "-target=#{x}" }.join(" ")
    answer = ""
    if !options.force
        while answer.empty? || (answer != "y" && answer != "n")
            print "\nDoes the plan look reasonable? (Answering yes will apply the changes) y/n: "
            answer = STDIN.gets.chomp
        end
    else
        answer = "y"
    end

    if answer == "n"
        puts "\nOk, will not proceed with commit"
    elsif answer == "y"
        puts "\nApplying the changes (this may take several minutes)"
        state_file = "#{options.build_dir}/#{deployment}.tfstate"
        #tf_apply = %x( terraform apply -state=#{state_file} #{options.build_dir})
        #puts "\n" + tf_apply
        begin
            PTY.spawn("terraform apply #{targets} -state=#{state_file} #{options.build_dir}/#{deployment}") do |stdout, stdin, pid|
            begin
                stdout.each { |line| puts line }
                rescue Errno::EIO
                end
            end
        rescue PTY::ChildExited
            puts "The child process exited!"
        end

        # Refresh outputs to make sure they are available in the state file
        command_output = ""
        begin
            puts "Refreshing terraform outputs"
            PTY.spawn("terraform refresh -state=#{state_file} #{options.build_dir}/#{deployment}") do |stdout, stdin, pid|
            begin
                stdout.each { |line| command_output << line }
                rescue Errno::EIO
                end
            end
        rescue PTY::ChildExited
            puts "Error executing terraform refresh.:\n"
            puts command_output
        end

        puts "Loading outputs for #{deployment} from #{state_file}"
        suite.deployments[deployment].load_outputs(state_file)
        state.node[:biosphere][:last_commit_time] = Time.now.utc.strftime('%Y-%m-%dT%H:%M:%SZ')
        state.save()
        s3.save("#{options.build_dir}/#{deployment}.tfstate")
        s3.save("#{options.build_dir}/state.node")
    end

    s3.release_lock()

elsif ARGV[0] == "destroy" && options.src
    if localmode
        STDERR.puts "destroy not supported in local mode (set in Settings :biosphere[:local] = true"
        exit -1
    end

    if !ARGV[1]
        puts "Please specify deployment name as the second parameter."
        puts "Available deployments:"
        suite.deployments.each do |name, deployment|
            puts "\t#{name}"
        end
        exit -1
    end
    deployment = ARGV[1]

    s3.set_lock()
    s3.retrieve("#{options.build_dir}/#{deployment}.tfstate")
    answer = ""
    if !options.force
        while answer.empty? || (answer != "y" && answer != "n")
            print "\nYou are about to destroy deployment #{deployment}? (Answering yes will nuke it from the orbit) y/n: "
            answer = STDIN.gets.chomp
        end
    else
        answer = "y"
    end

    if answer == "n"
        puts "\nAborted!"
    elsif answer == "y"
        puts "\nDestroying deployment #{deployment} (this may take several minutes)"
        tf_apply = %x( terraform destroy -force -state=#{options.build_dir}/#{deployment}.tfstate #{options.build_dir})
        puts "\n" + tf_apply
        s3.save("#{options.build_dir}/#{deployment}.tfstate")
        s3.save("#{options.build_dir}/state.node")
    end

    s3.release_lock()

elsif ARGV[0] == "lock"
    if localmode
        STDERR.puts "lock not supported in local mode (set in Settings :biosphere[:local] = true"
        exit -1
    end

    s3.set_lock()

elsif ARGV[0] == "unlock"
    if localmode
        STDERR.puts "unlock not supported in local mode (set in Settings :biosphere[:local] = true"
        exit -1
    end

    s3.release_lock()

else
    STDERR.puts "\nERROR: Unknown command #{ARGV[0]}. Maybe you wanted to do: \"biosphere action #{ARGV[0]}\"?"
    exit -1
end

